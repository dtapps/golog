// Code generated by ent, DO NOT EDIT.

package ginlog

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ginlog type in the database.
	Label = "gin_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "request_id"
	// FieldRequestTime holds the string denoting the request_time field in the database.
	FieldRequestTime = "request_time"
	// FieldRequestHost holds the string denoting the request_host field in the database.
	FieldRequestHost = "request_host"
	// FieldRequestPath holds the string denoting the request_path field in the database.
	FieldRequestPath = "request_path"
	// FieldRequestQuery holds the string denoting the request_query field in the database.
	FieldRequestQuery = "request_query"
	// FieldRequestMethod holds the string denoting the request_method field in the database.
	FieldRequestMethod = "request_method"
	// FieldRequestScheme holds the string denoting the request_scheme field in the database.
	FieldRequestScheme = "request_scheme"
	// FieldRequestContentType holds the string denoting the request_content_type field in the database.
	FieldRequestContentType = "request_content_type"
	// FieldRequestBody holds the string denoting the request_body field in the database.
	FieldRequestBody = "request_body"
	// FieldRequestClientIP holds the string denoting the request_client_ip field in the database.
	FieldRequestClientIP = "request_client_ip"
	// FieldRequestUserAgent holds the string denoting the request_user_agent field in the database.
	FieldRequestUserAgent = "request_user_agent"
	// FieldRequestHeader holds the string denoting the request_header field in the database.
	FieldRequestHeader = "request_header"
	// FieldRequestCostTime holds the string denoting the request_cost_time field in the database.
	FieldRequestCostTime = "request_cost_time"
	// FieldResponseTime holds the string denoting the response_time field in the database.
	FieldResponseTime = "response_time"
	// FieldResponseHeader holds the string denoting the response_header field in the database.
	FieldResponseHeader = "response_header"
	// FieldResponseStatusCode holds the string denoting the response_status_code field in the database.
	FieldResponseStatusCode = "response_status_code"
	// FieldResponseData holds the string denoting the response_data field in the database.
	FieldResponseData = "response_data"
	// FieldGoVersion holds the string denoting the go_version field in the database.
	FieldGoVersion = "go_version"
	// FieldSdkVersion holds the string denoting the sdk_version field in the database.
	FieldSdkVersion = "sdk_version"
	// FieldSystemInfo holds the string denoting the system_info field in the database.
	FieldSystemInfo = "system_info"
	// Table holds the table name of the ginlog in the database.
	Table = "gin_logs"
)

// Columns holds all SQL columns for ginlog fields.
var Columns = []string{
	FieldID,
	FieldRequestTime,
	FieldRequestHost,
	FieldRequestPath,
	FieldRequestQuery,
	FieldRequestMethod,
	FieldRequestScheme,
	FieldRequestContentType,
	FieldRequestBody,
	FieldRequestClientIP,
	FieldRequestUserAgent,
	FieldRequestHeader,
	FieldRequestCostTime,
	FieldResponseTime,
	FieldResponseHeader,
	FieldResponseStatusCode,
	FieldResponseData,
	FieldGoVersion,
	FieldSdkVersion,
	FieldSystemInfo,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the GinLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequestTime orders the results by the request_time field.
func ByRequestTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestTime, opts...).ToFunc()
}

// ByRequestHost orders the results by the request_host field.
func ByRequestHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestHost, opts...).ToFunc()
}

// ByRequestPath orders the results by the request_path field.
func ByRequestPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestPath, opts...).ToFunc()
}

// ByRequestQuery orders the results by the request_query field.
func ByRequestQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestQuery, opts...).ToFunc()
}

// ByRequestMethod orders the results by the request_method field.
func ByRequestMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestMethod, opts...).ToFunc()
}

// ByRequestScheme orders the results by the request_scheme field.
func ByRequestScheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestScheme, opts...).ToFunc()
}

// ByRequestContentType orders the results by the request_content_type field.
func ByRequestContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestContentType, opts...).ToFunc()
}

// ByRequestBody orders the results by the request_body field.
func ByRequestBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestBody, opts...).ToFunc()
}

// ByRequestClientIP orders the results by the request_client_ip field.
func ByRequestClientIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestClientIP, opts...).ToFunc()
}

// ByRequestUserAgent orders the results by the request_user_agent field.
func ByRequestUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestUserAgent, opts...).ToFunc()
}

// ByRequestHeader orders the results by the request_header field.
func ByRequestHeader(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestHeader, opts...).ToFunc()
}

// ByRequestCostTime orders the results by the request_cost_time field.
func ByRequestCostTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestCostTime, opts...).ToFunc()
}

// ByResponseTime orders the results by the response_time field.
func ByResponseTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseTime, opts...).ToFunc()
}

// ByResponseHeader orders the results by the response_header field.
func ByResponseHeader(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseHeader, opts...).ToFunc()
}

// ByResponseStatusCode orders the results by the response_status_code field.
func ByResponseStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseStatusCode, opts...).ToFunc()
}

// ByResponseData orders the results by the response_data field.
func ByResponseData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseData, opts...).ToFunc()
}

// ByGoVersion orders the results by the go_version field.
func ByGoVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoVersion, opts...).ToFunc()
}

// BySdkVersion orders the results by the sdk_version field.
func BySdkVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSdkVersion, opts...).ToFunc()
}

// BySystemInfo orders the results by the system_info field.
func BySystemInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemInfo, opts...).ToFunc()
}
