// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"go.dtapp.net/golog/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"go.dtapp.net/golog/internal/ent/apilog"
	"go.dtapp.net/golog/internal/ent/ginlog"
	"go.dtapp.net/golog/internal/ent/hertzlog"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApiLog is the client for interacting with the ApiLog builders.
	ApiLog *ApiLogClient
	// GinLog is the client for interacting with the GinLog builders.
	GinLog *GinLogClient
	// Hertzlog is the client for interacting with the Hertzlog builders.
	Hertzlog *HertzlogClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApiLog = NewApiLogClient(c.config)
	c.GinLog = NewGinLogClient(c.config)
	c.Hertzlog = NewHertzlogClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		ApiLog:   NewApiLogClient(cfg),
		GinLog:   NewGinLogClient(cfg),
		Hertzlog: NewHertzlogClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		ApiLog:   NewApiLogClient(cfg),
		GinLog:   NewGinLogClient(cfg),
		Hertzlog: NewHertzlogClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApiLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ApiLog.Use(hooks...)
	c.GinLog.Use(hooks...)
	c.Hertzlog.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ApiLog.Intercept(interceptors...)
	c.GinLog.Intercept(interceptors...)
	c.Hertzlog.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApiLogMutation:
		return c.ApiLog.mutate(ctx, m)
	case *GinLogMutation:
		return c.GinLog.mutate(ctx, m)
	case *HertzlogMutation:
		return c.Hertzlog.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApiLogClient is a client for the ApiLog schema.
type ApiLogClient struct {
	config
}

// NewApiLogClient returns a client for the ApiLog from the given config.
func NewApiLogClient(c config) *ApiLogClient {
	return &ApiLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apilog.Hooks(f(g(h())))`.
func (c *ApiLogClient) Use(hooks ...Hook) {
	c.hooks.ApiLog = append(c.hooks.ApiLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apilog.Intercept(f(g(h())))`.
func (c *ApiLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiLog = append(c.inters.ApiLog, interceptors...)
}

// Create returns a builder for creating a ApiLog entity.
func (c *ApiLogClient) Create() *ApiLogCreate {
	mutation := newApiLogMutation(c.config, OpCreate)
	return &ApiLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiLog entities.
func (c *ApiLogClient) CreateBulk(builders ...*ApiLogCreate) *ApiLogCreateBulk {
	return &ApiLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApiLogClient) MapCreateBulk(slice any, setFunc func(*ApiLogCreate, int)) *ApiLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApiLogCreateBulk{err: fmt.Errorf("calling to ApiLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApiLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApiLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiLog.
func (c *ApiLogClient) Update() *ApiLogUpdate {
	mutation := newApiLogMutation(c.config, OpUpdate)
	return &ApiLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiLogClient) UpdateOne(al *ApiLog) *ApiLogUpdateOne {
	mutation := newApiLogMutation(c.config, OpUpdateOne, withApiLog(al))
	return &ApiLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiLogClient) UpdateOneID(id int) *ApiLogUpdateOne {
	mutation := newApiLogMutation(c.config, OpUpdateOne, withApiLogID(id))
	return &ApiLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiLog.
func (c *ApiLogClient) Delete() *ApiLogDelete {
	mutation := newApiLogMutation(c.config, OpDelete)
	return &ApiLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiLogClient) DeleteOne(al *ApiLog) *ApiLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiLogClient) DeleteOneID(id int) *ApiLogDeleteOne {
	builder := c.Delete().Where(apilog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiLogDeleteOne{builder}
}

// Query returns a query builder for ApiLog.
func (c *ApiLogClient) Query() *ApiLogQuery {
	return &ApiLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiLog entity by its id.
func (c *ApiLogClient) Get(ctx context.Context, id int) (*ApiLog, error) {
	return c.Query().Where(apilog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiLogClient) GetX(ctx context.Context, id int) *ApiLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApiLogClient) Hooks() []Hook {
	return c.hooks.ApiLog
}

// Interceptors returns the client interceptors.
func (c *ApiLogClient) Interceptors() []Interceptor {
	return c.inters.ApiLog
}

func (c *ApiLogClient) mutate(ctx context.Context, m *ApiLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiLog mutation op: %q", m.Op())
	}
}

// GinLogClient is a client for the GinLog schema.
type GinLogClient struct {
	config
}

// NewGinLogClient returns a client for the GinLog from the given config.
func NewGinLogClient(c config) *GinLogClient {
	return &GinLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ginlog.Hooks(f(g(h())))`.
func (c *GinLogClient) Use(hooks ...Hook) {
	c.hooks.GinLog = append(c.hooks.GinLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ginlog.Intercept(f(g(h())))`.
func (c *GinLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.GinLog = append(c.inters.GinLog, interceptors...)
}

// Create returns a builder for creating a GinLog entity.
func (c *GinLogClient) Create() *GinLogCreate {
	mutation := newGinLogMutation(c.config, OpCreate)
	return &GinLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GinLog entities.
func (c *GinLogClient) CreateBulk(builders ...*GinLogCreate) *GinLogCreateBulk {
	return &GinLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GinLogClient) MapCreateBulk(slice any, setFunc func(*GinLogCreate, int)) *GinLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GinLogCreateBulk{err: fmt.Errorf("calling to GinLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GinLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GinLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GinLog.
func (c *GinLogClient) Update() *GinLogUpdate {
	mutation := newGinLogMutation(c.config, OpUpdate)
	return &GinLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GinLogClient) UpdateOne(gl *GinLog) *GinLogUpdateOne {
	mutation := newGinLogMutation(c.config, OpUpdateOne, withGinLog(gl))
	return &GinLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GinLogClient) UpdateOneID(id int64) *GinLogUpdateOne {
	mutation := newGinLogMutation(c.config, OpUpdateOne, withGinLogID(id))
	return &GinLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GinLog.
func (c *GinLogClient) Delete() *GinLogDelete {
	mutation := newGinLogMutation(c.config, OpDelete)
	return &GinLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GinLogClient) DeleteOne(gl *GinLog) *GinLogDeleteOne {
	return c.DeleteOneID(gl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GinLogClient) DeleteOneID(id int64) *GinLogDeleteOne {
	builder := c.Delete().Where(ginlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GinLogDeleteOne{builder}
}

// Query returns a query builder for GinLog.
func (c *GinLogClient) Query() *GinLogQuery {
	return &GinLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGinLog},
		inters: c.Interceptors(),
	}
}

// Get returns a GinLog entity by its id.
func (c *GinLogClient) Get(ctx context.Context, id int64) (*GinLog, error) {
	return c.Query().Where(ginlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GinLogClient) GetX(ctx context.Context, id int64) *GinLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GinLogClient) Hooks() []Hook {
	return c.hooks.GinLog
}

// Interceptors returns the client interceptors.
func (c *GinLogClient) Interceptors() []Interceptor {
	return c.inters.GinLog
}

func (c *GinLogClient) mutate(ctx context.Context, m *GinLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GinLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GinLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GinLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GinLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GinLog mutation op: %q", m.Op())
	}
}

// HertzlogClient is a client for the Hertzlog schema.
type HertzlogClient struct {
	config
}

// NewHertzlogClient returns a client for the Hertzlog from the given config.
func NewHertzlogClient(c config) *HertzlogClient {
	return &HertzlogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hertzlog.Hooks(f(g(h())))`.
func (c *HertzlogClient) Use(hooks ...Hook) {
	c.hooks.Hertzlog = append(c.hooks.Hertzlog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hertzlog.Intercept(f(g(h())))`.
func (c *HertzlogClient) Intercept(interceptors ...Interceptor) {
	c.inters.Hertzlog = append(c.inters.Hertzlog, interceptors...)
}

// Create returns a builder for creating a Hertzlog entity.
func (c *HertzlogClient) Create() *HertzlogCreate {
	mutation := newHertzlogMutation(c.config, OpCreate)
	return &HertzlogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hertzlog entities.
func (c *HertzlogClient) CreateBulk(builders ...*HertzlogCreate) *HertzlogCreateBulk {
	return &HertzlogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HertzlogClient) MapCreateBulk(slice any, setFunc func(*HertzlogCreate, int)) *HertzlogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HertzlogCreateBulk{err: fmt.Errorf("calling to HertzlogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HertzlogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HertzlogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hertzlog.
func (c *HertzlogClient) Update() *HertzlogUpdate {
	mutation := newHertzlogMutation(c.config, OpUpdate)
	return &HertzlogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HertzlogClient) UpdateOne(h *Hertzlog) *HertzlogUpdateOne {
	mutation := newHertzlogMutation(c.config, OpUpdateOne, withHertzlog(h))
	return &HertzlogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HertzlogClient) UpdateOneID(id int) *HertzlogUpdateOne {
	mutation := newHertzlogMutation(c.config, OpUpdateOne, withHertzlogID(id))
	return &HertzlogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hertzlog.
func (c *HertzlogClient) Delete() *HertzlogDelete {
	mutation := newHertzlogMutation(c.config, OpDelete)
	return &HertzlogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HertzlogClient) DeleteOne(h *Hertzlog) *HertzlogDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HertzlogClient) DeleteOneID(id int) *HertzlogDeleteOne {
	builder := c.Delete().Where(hertzlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HertzlogDeleteOne{builder}
}

// Query returns a query builder for Hertzlog.
func (c *HertzlogClient) Query() *HertzlogQuery {
	return &HertzlogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHertzlog},
		inters: c.Interceptors(),
	}
}

// Get returns a Hertzlog entity by its id.
func (c *HertzlogClient) Get(ctx context.Context, id int) (*Hertzlog, error) {
	return c.Query().Where(hertzlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HertzlogClient) GetX(ctx context.Context, id int) *Hertzlog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HertzlogClient) Hooks() []Hook {
	return c.hooks.Hertzlog
}

// Interceptors returns the client interceptors.
func (c *HertzlogClient) Interceptors() []Interceptor {
	return c.inters.Hertzlog
}

func (c *HertzlogClient) mutate(ctx context.Context, m *HertzlogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HertzlogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HertzlogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HertzlogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HertzlogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Hertzlog mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApiLog, GinLog, Hertzlog []ent.Hook
	}
	inters struct {
		ApiLog, GinLog, Hertzlog []ent.Interceptor
	}
)
