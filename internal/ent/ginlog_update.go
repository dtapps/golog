// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.dtapp.net/golog/internal/ent/ginlog"
	"go.dtapp.net/golog/internal/ent/predicate"
)

// GinLogUpdate is the builder for updating GinLog entities.
type GinLogUpdate struct {
	config
	hooks    []Hook
	mutation *GinLogMutation
}

// Where appends a list predicates to the GinLogUpdate builder.
func (glu *GinLogUpdate) Where(ps ...predicate.GinLog) *GinLogUpdate {
	glu.mutation.Where(ps...)
	return glu
}

// SetRequestTime sets the "request_time" field.
func (glu *GinLogUpdate) SetRequestTime(t time.Time) *GinLogUpdate {
	glu.mutation.SetRequestTime(t)
	return glu
}

// SetNillableRequestTime sets the "request_time" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestTime(t *time.Time) *GinLogUpdate {
	if t != nil {
		glu.SetRequestTime(*t)
	}
	return glu
}

// ClearRequestTime clears the value of the "request_time" field.
func (glu *GinLogUpdate) ClearRequestTime() *GinLogUpdate {
	glu.mutation.ClearRequestTime()
	return glu
}

// SetRequestHost sets the "request_host" field.
func (glu *GinLogUpdate) SetRequestHost(s string) *GinLogUpdate {
	glu.mutation.SetRequestHost(s)
	return glu
}

// SetNillableRequestHost sets the "request_host" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestHost(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestHost(*s)
	}
	return glu
}

// ClearRequestHost clears the value of the "request_host" field.
func (glu *GinLogUpdate) ClearRequestHost() *GinLogUpdate {
	glu.mutation.ClearRequestHost()
	return glu
}

// SetRequestPath sets the "request_path" field.
func (glu *GinLogUpdate) SetRequestPath(s string) *GinLogUpdate {
	glu.mutation.SetRequestPath(s)
	return glu
}

// SetNillableRequestPath sets the "request_path" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestPath(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestPath(*s)
	}
	return glu
}

// ClearRequestPath clears the value of the "request_path" field.
func (glu *GinLogUpdate) ClearRequestPath() *GinLogUpdate {
	glu.mutation.ClearRequestPath()
	return glu
}

// SetRequestQuery sets the "request_query" field.
func (glu *GinLogUpdate) SetRequestQuery(s string) *GinLogUpdate {
	glu.mutation.SetRequestQuery(s)
	return glu
}

// SetNillableRequestQuery sets the "request_query" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestQuery(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestQuery(*s)
	}
	return glu
}

// ClearRequestQuery clears the value of the "request_query" field.
func (glu *GinLogUpdate) ClearRequestQuery() *GinLogUpdate {
	glu.mutation.ClearRequestQuery()
	return glu
}

// SetRequestMethod sets the "request_method" field.
func (glu *GinLogUpdate) SetRequestMethod(s string) *GinLogUpdate {
	glu.mutation.SetRequestMethod(s)
	return glu
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestMethod(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestMethod(*s)
	}
	return glu
}

// ClearRequestMethod clears the value of the "request_method" field.
func (glu *GinLogUpdate) ClearRequestMethod() *GinLogUpdate {
	glu.mutation.ClearRequestMethod()
	return glu
}

// SetRequestScheme sets the "request_scheme" field.
func (glu *GinLogUpdate) SetRequestScheme(s string) *GinLogUpdate {
	glu.mutation.SetRequestScheme(s)
	return glu
}

// SetNillableRequestScheme sets the "request_scheme" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestScheme(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestScheme(*s)
	}
	return glu
}

// ClearRequestScheme clears the value of the "request_scheme" field.
func (glu *GinLogUpdate) ClearRequestScheme() *GinLogUpdate {
	glu.mutation.ClearRequestScheme()
	return glu
}

// SetRequestContentType sets the "request_content_type" field.
func (glu *GinLogUpdate) SetRequestContentType(s string) *GinLogUpdate {
	glu.mutation.SetRequestContentType(s)
	return glu
}

// SetNillableRequestContentType sets the "request_content_type" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestContentType(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestContentType(*s)
	}
	return glu
}

// ClearRequestContentType clears the value of the "request_content_type" field.
func (glu *GinLogUpdate) ClearRequestContentType() *GinLogUpdate {
	glu.mutation.ClearRequestContentType()
	return glu
}

// SetRequestBody sets the "request_body" field.
func (glu *GinLogUpdate) SetRequestBody(s string) *GinLogUpdate {
	glu.mutation.SetRequestBody(s)
	return glu
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestBody(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestBody(*s)
	}
	return glu
}

// ClearRequestBody clears the value of the "request_body" field.
func (glu *GinLogUpdate) ClearRequestBody() *GinLogUpdate {
	glu.mutation.ClearRequestBody()
	return glu
}

// SetRequestClientIP sets the "request_client_ip" field.
func (glu *GinLogUpdate) SetRequestClientIP(s string) *GinLogUpdate {
	glu.mutation.SetRequestClientIP(s)
	return glu
}

// SetNillableRequestClientIP sets the "request_client_ip" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestClientIP(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestClientIP(*s)
	}
	return glu
}

// ClearRequestClientIP clears the value of the "request_client_ip" field.
func (glu *GinLogUpdate) ClearRequestClientIP() *GinLogUpdate {
	glu.mutation.ClearRequestClientIP()
	return glu
}

// SetRequestUserAgent sets the "request_user_agent" field.
func (glu *GinLogUpdate) SetRequestUserAgent(s string) *GinLogUpdate {
	glu.mutation.SetRequestUserAgent(s)
	return glu
}

// SetNillableRequestUserAgent sets the "request_user_agent" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestUserAgent(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestUserAgent(*s)
	}
	return glu
}

// ClearRequestUserAgent clears the value of the "request_user_agent" field.
func (glu *GinLogUpdate) ClearRequestUserAgent() *GinLogUpdate {
	glu.mutation.ClearRequestUserAgent()
	return glu
}

// SetRequestHeader sets the "request_header" field.
func (glu *GinLogUpdate) SetRequestHeader(s string) *GinLogUpdate {
	glu.mutation.SetRequestHeader(s)
	return glu
}

// SetNillableRequestHeader sets the "request_header" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestHeader(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetRequestHeader(*s)
	}
	return glu
}

// ClearRequestHeader clears the value of the "request_header" field.
func (glu *GinLogUpdate) ClearRequestHeader() *GinLogUpdate {
	glu.mutation.ClearRequestHeader()
	return glu
}

// SetRequestCostTime sets the "request_cost_time" field.
func (glu *GinLogUpdate) SetRequestCostTime(i int64) *GinLogUpdate {
	glu.mutation.ResetRequestCostTime()
	glu.mutation.SetRequestCostTime(i)
	return glu
}

// SetNillableRequestCostTime sets the "request_cost_time" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableRequestCostTime(i *int64) *GinLogUpdate {
	if i != nil {
		glu.SetRequestCostTime(*i)
	}
	return glu
}

// AddRequestCostTime adds i to the "request_cost_time" field.
func (glu *GinLogUpdate) AddRequestCostTime(i int64) *GinLogUpdate {
	glu.mutation.AddRequestCostTime(i)
	return glu
}

// ClearRequestCostTime clears the value of the "request_cost_time" field.
func (glu *GinLogUpdate) ClearRequestCostTime() *GinLogUpdate {
	glu.mutation.ClearRequestCostTime()
	return glu
}

// SetResponseTime sets the "response_time" field.
func (glu *GinLogUpdate) SetResponseTime(t time.Time) *GinLogUpdate {
	glu.mutation.SetResponseTime(t)
	return glu
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableResponseTime(t *time.Time) *GinLogUpdate {
	if t != nil {
		glu.SetResponseTime(*t)
	}
	return glu
}

// ClearResponseTime clears the value of the "response_time" field.
func (glu *GinLogUpdate) ClearResponseTime() *GinLogUpdate {
	glu.mutation.ClearResponseTime()
	return glu
}

// SetResponseHeader sets the "response_header" field.
func (glu *GinLogUpdate) SetResponseHeader(s string) *GinLogUpdate {
	glu.mutation.SetResponseHeader(s)
	return glu
}

// SetNillableResponseHeader sets the "response_header" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableResponseHeader(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetResponseHeader(*s)
	}
	return glu
}

// ClearResponseHeader clears the value of the "response_header" field.
func (glu *GinLogUpdate) ClearResponseHeader() *GinLogUpdate {
	glu.mutation.ClearResponseHeader()
	return glu
}

// SetResponseStatusCode sets the "response_status_code" field.
func (glu *GinLogUpdate) SetResponseStatusCode(i int) *GinLogUpdate {
	glu.mutation.ResetResponseStatusCode()
	glu.mutation.SetResponseStatusCode(i)
	return glu
}

// SetNillableResponseStatusCode sets the "response_status_code" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableResponseStatusCode(i *int) *GinLogUpdate {
	if i != nil {
		glu.SetResponseStatusCode(*i)
	}
	return glu
}

// AddResponseStatusCode adds i to the "response_status_code" field.
func (glu *GinLogUpdate) AddResponseStatusCode(i int) *GinLogUpdate {
	glu.mutation.AddResponseStatusCode(i)
	return glu
}

// ClearResponseStatusCode clears the value of the "response_status_code" field.
func (glu *GinLogUpdate) ClearResponseStatusCode() *GinLogUpdate {
	glu.mutation.ClearResponseStatusCode()
	return glu
}

// SetResponseData sets the "response_data" field.
func (glu *GinLogUpdate) SetResponseData(s string) *GinLogUpdate {
	glu.mutation.SetResponseData(s)
	return glu
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableResponseData(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetResponseData(*s)
	}
	return glu
}

// ClearResponseData clears the value of the "response_data" field.
func (glu *GinLogUpdate) ClearResponseData() *GinLogUpdate {
	glu.mutation.ClearResponseData()
	return glu
}

// SetGoVersion sets the "go_version" field.
func (glu *GinLogUpdate) SetGoVersion(s string) *GinLogUpdate {
	glu.mutation.SetGoVersion(s)
	return glu
}

// SetNillableGoVersion sets the "go_version" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableGoVersion(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetGoVersion(*s)
	}
	return glu
}

// ClearGoVersion clears the value of the "go_version" field.
func (glu *GinLogUpdate) ClearGoVersion() *GinLogUpdate {
	glu.mutation.ClearGoVersion()
	return glu
}

// SetSdkVersion sets the "sdk_version" field.
func (glu *GinLogUpdate) SetSdkVersion(s string) *GinLogUpdate {
	glu.mutation.SetSdkVersion(s)
	return glu
}

// SetNillableSdkVersion sets the "sdk_version" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableSdkVersion(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetSdkVersion(*s)
	}
	return glu
}

// ClearSdkVersion clears the value of the "sdk_version" field.
func (glu *GinLogUpdate) ClearSdkVersion() *GinLogUpdate {
	glu.mutation.ClearSdkVersion()
	return glu
}

// SetSystemInfo sets the "system_info" field.
func (glu *GinLogUpdate) SetSystemInfo(s string) *GinLogUpdate {
	glu.mutation.SetSystemInfo(s)
	return glu
}

// SetNillableSystemInfo sets the "system_info" field if the given value is not nil.
func (glu *GinLogUpdate) SetNillableSystemInfo(s *string) *GinLogUpdate {
	if s != nil {
		glu.SetSystemInfo(*s)
	}
	return glu
}

// ClearSystemInfo clears the value of the "system_info" field.
func (glu *GinLogUpdate) ClearSystemInfo() *GinLogUpdate {
	glu.mutation.ClearSystemInfo()
	return glu
}

// Mutation returns the GinLogMutation object of the builder.
func (glu *GinLogUpdate) Mutation() *GinLogMutation {
	return glu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (glu *GinLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, glu.sqlSave, glu.mutation, glu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (glu *GinLogUpdate) SaveX(ctx context.Context) int {
	affected, err := glu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (glu *GinLogUpdate) Exec(ctx context.Context) error {
	_, err := glu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glu *GinLogUpdate) ExecX(ctx context.Context) {
	if err := glu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (glu *GinLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ginlog.Table, ginlog.Columns, sqlgraph.NewFieldSpec(ginlog.FieldID, field.TypeInt64))
	if ps := glu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glu.mutation.RequestTime(); ok {
		_spec.SetField(ginlog.FieldRequestTime, field.TypeTime, value)
	}
	if glu.mutation.RequestTimeCleared() {
		_spec.ClearField(ginlog.FieldRequestTime, field.TypeTime)
	}
	if value, ok := glu.mutation.RequestHost(); ok {
		_spec.SetField(ginlog.FieldRequestHost, field.TypeString, value)
	}
	if glu.mutation.RequestHostCleared() {
		_spec.ClearField(ginlog.FieldRequestHost, field.TypeString)
	}
	if value, ok := glu.mutation.RequestPath(); ok {
		_spec.SetField(ginlog.FieldRequestPath, field.TypeString, value)
	}
	if glu.mutation.RequestPathCleared() {
		_spec.ClearField(ginlog.FieldRequestPath, field.TypeString)
	}
	if value, ok := glu.mutation.RequestQuery(); ok {
		_spec.SetField(ginlog.FieldRequestQuery, field.TypeString, value)
	}
	if glu.mutation.RequestQueryCleared() {
		_spec.ClearField(ginlog.FieldRequestQuery, field.TypeString)
	}
	if value, ok := glu.mutation.RequestMethod(); ok {
		_spec.SetField(ginlog.FieldRequestMethod, field.TypeString, value)
	}
	if glu.mutation.RequestMethodCleared() {
		_spec.ClearField(ginlog.FieldRequestMethod, field.TypeString)
	}
	if value, ok := glu.mutation.RequestScheme(); ok {
		_spec.SetField(ginlog.FieldRequestScheme, field.TypeString, value)
	}
	if glu.mutation.RequestSchemeCleared() {
		_spec.ClearField(ginlog.FieldRequestScheme, field.TypeString)
	}
	if value, ok := glu.mutation.RequestContentType(); ok {
		_spec.SetField(ginlog.FieldRequestContentType, field.TypeString, value)
	}
	if glu.mutation.RequestContentTypeCleared() {
		_spec.ClearField(ginlog.FieldRequestContentType, field.TypeString)
	}
	if value, ok := glu.mutation.RequestBody(); ok {
		_spec.SetField(ginlog.FieldRequestBody, field.TypeString, value)
	}
	if glu.mutation.RequestBodyCleared() {
		_spec.ClearField(ginlog.FieldRequestBody, field.TypeString)
	}
	if value, ok := glu.mutation.RequestClientIP(); ok {
		_spec.SetField(ginlog.FieldRequestClientIP, field.TypeString, value)
	}
	if glu.mutation.RequestClientIPCleared() {
		_spec.ClearField(ginlog.FieldRequestClientIP, field.TypeString)
	}
	if value, ok := glu.mutation.RequestUserAgent(); ok {
		_spec.SetField(ginlog.FieldRequestUserAgent, field.TypeString, value)
	}
	if glu.mutation.RequestUserAgentCleared() {
		_spec.ClearField(ginlog.FieldRequestUserAgent, field.TypeString)
	}
	if value, ok := glu.mutation.RequestHeader(); ok {
		_spec.SetField(ginlog.FieldRequestHeader, field.TypeString, value)
	}
	if glu.mutation.RequestHeaderCleared() {
		_spec.ClearField(ginlog.FieldRequestHeader, field.TypeString)
	}
	if value, ok := glu.mutation.RequestCostTime(); ok {
		_spec.SetField(ginlog.FieldRequestCostTime, field.TypeInt64, value)
	}
	if value, ok := glu.mutation.AddedRequestCostTime(); ok {
		_spec.AddField(ginlog.FieldRequestCostTime, field.TypeInt64, value)
	}
	if glu.mutation.RequestCostTimeCleared() {
		_spec.ClearField(ginlog.FieldRequestCostTime, field.TypeInt64)
	}
	if value, ok := glu.mutation.ResponseTime(); ok {
		_spec.SetField(ginlog.FieldResponseTime, field.TypeTime, value)
	}
	if glu.mutation.ResponseTimeCleared() {
		_spec.ClearField(ginlog.FieldResponseTime, field.TypeTime)
	}
	if value, ok := glu.mutation.ResponseHeader(); ok {
		_spec.SetField(ginlog.FieldResponseHeader, field.TypeString, value)
	}
	if glu.mutation.ResponseHeaderCleared() {
		_spec.ClearField(ginlog.FieldResponseHeader, field.TypeString)
	}
	if value, ok := glu.mutation.ResponseStatusCode(); ok {
		_spec.SetField(ginlog.FieldResponseStatusCode, field.TypeInt, value)
	}
	if value, ok := glu.mutation.AddedResponseStatusCode(); ok {
		_spec.AddField(ginlog.FieldResponseStatusCode, field.TypeInt, value)
	}
	if glu.mutation.ResponseStatusCodeCleared() {
		_spec.ClearField(ginlog.FieldResponseStatusCode, field.TypeInt)
	}
	if value, ok := glu.mutation.ResponseData(); ok {
		_spec.SetField(ginlog.FieldResponseData, field.TypeString, value)
	}
	if glu.mutation.ResponseDataCleared() {
		_spec.ClearField(ginlog.FieldResponseData, field.TypeString)
	}
	if value, ok := glu.mutation.GoVersion(); ok {
		_spec.SetField(ginlog.FieldGoVersion, field.TypeString, value)
	}
	if glu.mutation.GoVersionCleared() {
		_spec.ClearField(ginlog.FieldGoVersion, field.TypeString)
	}
	if value, ok := glu.mutation.SdkVersion(); ok {
		_spec.SetField(ginlog.FieldSdkVersion, field.TypeString, value)
	}
	if glu.mutation.SdkVersionCleared() {
		_spec.ClearField(ginlog.FieldSdkVersion, field.TypeString)
	}
	if value, ok := glu.mutation.SystemInfo(); ok {
		_spec.SetField(ginlog.FieldSystemInfo, field.TypeString, value)
	}
	if glu.mutation.SystemInfoCleared() {
		_spec.ClearField(ginlog.FieldSystemInfo, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, glu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	glu.mutation.done = true
	return n, nil
}

// GinLogUpdateOne is the builder for updating a single GinLog entity.
type GinLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GinLogMutation
}

// SetRequestTime sets the "request_time" field.
func (gluo *GinLogUpdateOne) SetRequestTime(t time.Time) *GinLogUpdateOne {
	gluo.mutation.SetRequestTime(t)
	return gluo
}

// SetNillableRequestTime sets the "request_time" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestTime(t *time.Time) *GinLogUpdateOne {
	if t != nil {
		gluo.SetRequestTime(*t)
	}
	return gluo
}

// ClearRequestTime clears the value of the "request_time" field.
func (gluo *GinLogUpdateOne) ClearRequestTime() *GinLogUpdateOne {
	gluo.mutation.ClearRequestTime()
	return gluo
}

// SetRequestHost sets the "request_host" field.
func (gluo *GinLogUpdateOne) SetRequestHost(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestHost(s)
	return gluo
}

// SetNillableRequestHost sets the "request_host" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestHost(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestHost(*s)
	}
	return gluo
}

// ClearRequestHost clears the value of the "request_host" field.
func (gluo *GinLogUpdateOne) ClearRequestHost() *GinLogUpdateOne {
	gluo.mutation.ClearRequestHost()
	return gluo
}

// SetRequestPath sets the "request_path" field.
func (gluo *GinLogUpdateOne) SetRequestPath(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestPath(s)
	return gluo
}

// SetNillableRequestPath sets the "request_path" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestPath(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestPath(*s)
	}
	return gluo
}

// ClearRequestPath clears the value of the "request_path" field.
func (gluo *GinLogUpdateOne) ClearRequestPath() *GinLogUpdateOne {
	gluo.mutation.ClearRequestPath()
	return gluo
}

// SetRequestQuery sets the "request_query" field.
func (gluo *GinLogUpdateOne) SetRequestQuery(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestQuery(s)
	return gluo
}

// SetNillableRequestQuery sets the "request_query" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestQuery(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestQuery(*s)
	}
	return gluo
}

// ClearRequestQuery clears the value of the "request_query" field.
func (gluo *GinLogUpdateOne) ClearRequestQuery() *GinLogUpdateOne {
	gluo.mutation.ClearRequestQuery()
	return gluo
}

// SetRequestMethod sets the "request_method" field.
func (gluo *GinLogUpdateOne) SetRequestMethod(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestMethod(s)
	return gluo
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestMethod(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestMethod(*s)
	}
	return gluo
}

// ClearRequestMethod clears the value of the "request_method" field.
func (gluo *GinLogUpdateOne) ClearRequestMethod() *GinLogUpdateOne {
	gluo.mutation.ClearRequestMethod()
	return gluo
}

// SetRequestScheme sets the "request_scheme" field.
func (gluo *GinLogUpdateOne) SetRequestScheme(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestScheme(s)
	return gluo
}

// SetNillableRequestScheme sets the "request_scheme" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestScheme(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestScheme(*s)
	}
	return gluo
}

// ClearRequestScheme clears the value of the "request_scheme" field.
func (gluo *GinLogUpdateOne) ClearRequestScheme() *GinLogUpdateOne {
	gluo.mutation.ClearRequestScheme()
	return gluo
}

// SetRequestContentType sets the "request_content_type" field.
func (gluo *GinLogUpdateOne) SetRequestContentType(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestContentType(s)
	return gluo
}

// SetNillableRequestContentType sets the "request_content_type" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestContentType(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestContentType(*s)
	}
	return gluo
}

// ClearRequestContentType clears the value of the "request_content_type" field.
func (gluo *GinLogUpdateOne) ClearRequestContentType() *GinLogUpdateOne {
	gluo.mutation.ClearRequestContentType()
	return gluo
}

// SetRequestBody sets the "request_body" field.
func (gluo *GinLogUpdateOne) SetRequestBody(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestBody(s)
	return gluo
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestBody(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestBody(*s)
	}
	return gluo
}

// ClearRequestBody clears the value of the "request_body" field.
func (gluo *GinLogUpdateOne) ClearRequestBody() *GinLogUpdateOne {
	gluo.mutation.ClearRequestBody()
	return gluo
}

// SetRequestClientIP sets the "request_client_ip" field.
func (gluo *GinLogUpdateOne) SetRequestClientIP(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestClientIP(s)
	return gluo
}

// SetNillableRequestClientIP sets the "request_client_ip" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestClientIP(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestClientIP(*s)
	}
	return gluo
}

// ClearRequestClientIP clears the value of the "request_client_ip" field.
func (gluo *GinLogUpdateOne) ClearRequestClientIP() *GinLogUpdateOne {
	gluo.mutation.ClearRequestClientIP()
	return gluo
}

// SetRequestUserAgent sets the "request_user_agent" field.
func (gluo *GinLogUpdateOne) SetRequestUserAgent(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestUserAgent(s)
	return gluo
}

// SetNillableRequestUserAgent sets the "request_user_agent" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestUserAgent(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestUserAgent(*s)
	}
	return gluo
}

// ClearRequestUserAgent clears the value of the "request_user_agent" field.
func (gluo *GinLogUpdateOne) ClearRequestUserAgent() *GinLogUpdateOne {
	gluo.mutation.ClearRequestUserAgent()
	return gluo
}

// SetRequestHeader sets the "request_header" field.
func (gluo *GinLogUpdateOne) SetRequestHeader(s string) *GinLogUpdateOne {
	gluo.mutation.SetRequestHeader(s)
	return gluo
}

// SetNillableRequestHeader sets the "request_header" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestHeader(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetRequestHeader(*s)
	}
	return gluo
}

// ClearRequestHeader clears the value of the "request_header" field.
func (gluo *GinLogUpdateOne) ClearRequestHeader() *GinLogUpdateOne {
	gluo.mutation.ClearRequestHeader()
	return gluo
}

// SetRequestCostTime sets the "request_cost_time" field.
func (gluo *GinLogUpdateOne) SetRequestCostTime(i int64) *GinLogUpdateOne {
	gluo.mutation.ResetRequestCostTime()
	gluo.mutation.SetRequestCostTime(i)
	return gluo
}

// SetNillableRequestCostTime sets the "request_cost_time" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableRequestCostTime(i *int64) *GinLogUpdateOne {
	if i != nil {
		gluo.SetRequestCostTime(*i)
	}
	return gluo
}

// AddRequestCostTime adds i to the "request_cost_time" field.
func (gluo *GinLogUpdateOne) AddRequestCostTime(i int64) *GinLogUpdateOne {
	gluo.mutation.AddRequestCostTime(i)
	return gluo
}

// ClearRequestCostTime clears the value of the "request_cost_time" field.
func (gluo *GinLogUpdateOne) ClearRequestCostTime() *GinLogUpdateOne {
	gluo.mutation.ClearRequestCostTime()
	return gluo
}

// SetResponseTime sets the "response_time" field.
func (gluo *GinLogUpdateOne) SetResponseTime(t time.Time) *GinLogUpdateOne {
	gluo.mutation.SetResponseTime(t)
	return gluo
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableResponseTime(t *time.Time) *GinLogUpdateOne {
	if t != nil {
		gluo.SetResponseTime(*t)
	}
	return gluo
}

// ClearResponseTime clears the value of the "response_time" field.
func (gluo *GinLogUpdateOne) ClearResponseTime() *GinLogUpdateOne {
	gluo.mutation.ClearResponseTime()
	return gluo
}

// SetResponseHeader sets the "response_header" field.
func (gluo *GinLogUpdateOne) SetResponseHeader(s string) *GinLogUpdateOne {
	gluo.mutation.SetResponseHeader(s)
	return gluo
}

// SetNillableResponseHeader sets the "response_header" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableResponseHeader(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetResponseHeader(*s)
	}
	return gluo
}

// ClearResponseHeader clears the value of the "response_header" field.
func (gluo *GinLogUpdateOne) ClearResponseHeader() *GinLogUpdateOne {
	gluo.mutation.ClearResponseHeader()
	return gluo
}

// SetResponseStatusCode sets the "response_status_code" field.
func (gluo *GinLogUpdateOne) SetResponseStatusCode(i int) *GinLogUpdateOne {
	gluo.mutation.ResetResponseStatusCode()
	gluo.mutation.SetResponseStatusCode(i)
	return gluo
}

// SetNillableResponseStatusCode sets the "response_status_code" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableResponseStatusCode(i *int) *GinLogUpdateOne {
	if i != nil {
		gluo.SetResponseStatusCode(*i)
	}
	return gluo
}

// AddResponseStatusCode adds i to the "response_status_code" field.
func (gluo *GinLogUpdateOne) AddResponseStatusCode(i int) *GinLogUpdateOne {
	gluo.mutation.AddResponseStatusCode(i)
	return gluo
}

// ClearResponseStatusCode clears the value of the "response_status_code" field.
func (gluo *GinLogUpdateOne) ClearResponseStatusCode() *GinLogUpdateOne {
	gluo.mutation.ClearResponseStatusCode()
	return gluo
}

// SetResponseData sets the "response_data" field.
func (gluo *GinLogUpdateOne) SetResponseData(s string) *GinLogUpdateOne {
	gluo.mutation.SetResponseData(s)
	return gluo
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableResponseData(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetResponseData(*s)
	}
	return gluo
}

// ClearResponseData clears the value of the "response_data" field.
func (gluo *GinLogUpdateOne) ClearResponseData() *GinLogUpdateOne {
	gluo.mutation.ClearResponseData()
	return gluo
}

// SetGoVersion sets the "go_version" field.
func (gluo *GinLogUpdateOne) SetGoVersion(s string) *GinLogUpdateOne {
	gluo.mutation.SetGoVersion(s)
	return gluo
}

// SetNillableGoVersion sets the "go_version" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableGoVersion(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetGoVersion(*s)
	}
	return gluo
}

// ClearGoVersion clears the value of the "go_version" field.
func (gluo *GinLogUpdateOne) ClearGoVersion() *GinLogUpdateOne {
	gluo.mutation.ClearGoVersion()
	return gluo
}

// SetSdkVersion sets the "sdk_version" field.
func (gluo *GinLogUpdateOne) SetSdkVersion(s string) *GinLogUpdateOne {
	gluo.mutation.SetSdkVersion(s)
	return gluo
}

// SetNillableSdkVersion sets the "sdk_version" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableSdkVersion(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetSdkVersion(*s)
	}
	return gluo
}

// ClearSdkVersion clears the value of the "sdk_version" field.
func (gluo *GinLogUpdateOne) ClearSdkVersion() *GinLogUpdateOne {
	gluo.mutation.ClearSdkVersion()
	return gluo
}

// SetSystemInfo sets the "system_info" field.
func (gluo *GinLogUpdateOne) SetSystemInfo(s string) *GinLogUpdateOne {
	gluo.mutation.SetSystemInfo(s)
	return gluo
}

// SetNillableSystemInfo sets the "system_info" field if the given value is not nil.
func (gluo *GinLogUpdateOne) SetNillableSystemInfo(s *string) *GinLogUpdateOne {
	if s != nil {
		gluo.SetSystemInfo(*s)
	}
	return gluo
}

// ClearSystemInfo clears the value of the "system_info" field.
func (gluo *GinLogUpdateOne) ClearSystemInfo() *GinLogUpdateOne {
	gluo.mutation.ClearSystemInfo()
	return gluo
}

// Mutation returns the GinLogMutation object of the builder.
func (gluo *GinLogUpdateOne) Mutation() *GinLogMutation {
	return gluo.mutation
}

// Where appends a list predicates to the GinLogUpdate builder.
func (gluo *GinLogUpdateOne) Where(ps ...predicate.GinLog) *GinLogUpdateOne {
	gluo.mutation.Where(ps...)
	return gluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gluo *GinLogUpdateOne) Select(field string, fields ...string) *GinLogUpdateOne {
	gluo.fields = append([]string{field}, fields...)
	return gluo
}

// Save executes the query and returns the updated GinLog entity.
func (gluo *GinLogUpdateOne) Save(ctx context.Context) (*GinLog, error) {
	return withHooks(ctx, gluo.sqlSave, gluo.mutation, gluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gluo *GinLogUpdateOne) SaveX(ctx context.Context) *GinLog {
	node, err := gluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gluo *GinLogUpdateOne) Exec(ctx context.Context) error {
	_, err := gluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gluo *GinLogUpdateOne) ExecX(ctx context.Context) {
	if err := gluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gluo *GinLogUpdateOne) sqlSave(ctx context.Context) (_node *GinLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(ginlog.Table, ginlog.Columns, sqlgraph.NewFieldSpec(ginlog.FieldID, field.TypeInt64))
	id, ok := gluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GinLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ginlog.FieldID)
		for _, f := range fields {
			if !ginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gluo.mutation.RequestTime(); ok {
		_spec.SetField(ginlog.FieldRequestTime, field.TypeTime, value)
	}
	if gluo.mutation.RequestTimeCleared() {
		_spec.ClearField(ginlog.FieldRequestTime, field.TypeTime)
	}
	if value, ok := gluo.mutation.RequestHost(); ok {
		_spec.SetField(ginlog.FieldRequestHost, field.TypeString, value)
	}
	if gluo.mutation.RequestHostCleared() {
		_spec.ClearField(ginlog.FieldRequestHost, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestPath(); ok {
		_spec.SetField(ginlog.FieldRequestPath, field.TypeString, value)
	}
	if gluo.mutation.RequestPathCleared() {
		_spec.ClearField(ginlog.FieldRequestPath, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestQuery(); ok {
		_spec.SetField(ginlog.FieldRequestQuery, field.TypeString, value)
	}
	if gluo.mutation.RequestQueryCleared() {
		_spec.ClearField(ginlog.FieldRequestQuery, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestMethod(); ok {
		_spec.SetField(ginlog.FieldRequestMethod, field.TypeString, value)
	}
	if gluo.mutation.RequestMethodCleared() {
		_spec.ClearField(ginlog.FieldRequestMethod, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestScheme(); ok {
		_spec.SetField(ginlog.FieldRequestScheme, field.TypeString, value)
	}
	if gluo.mutation.RequestSchemeCleared() {
		_spec.ClearField(ginlog.FieldRequestScheme, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestContentType(); ok {
		_spec.SetField(ginlog.FieldRequestContentType, field.TypeString, value)
	}
	if gluo.mutation.RequestContentTypeCleared() {
		_spec.ClearField(ginlog.FieldRequestContentType, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestBody(); ok {
		_spec.SetField(ginlog.FieldRequestBody, field.TypeString, value)
	}
	if gluo.mutation.RequestBodyCleared() {
		_spec.ClearField(ginlog.FieldRequestBody, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestClientIP(); ok {
		_spec.SetField(ginlog.FieldRequestClientIP, field.TypeString, value)
	}
	if gluo.mutation.RequestClientIPCleared() {
		_spec.ClearField(ginlog.FieldRequestClientIP, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestUserAgent(); ok {
		_spec.SetField(ginlog.FieldRequestUserAgent, field.TypeString, value)
	}
	if gluo.mutation.RequestUserAgentCleared() {
		_spec.ClearField(ginlog.FieldRequestUserAgent, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestHeader(); ok {
		_spec.SetField(ginlog.FieldRequestHeader, field.TypeString, value)
	}
	if gluo.mutation.RequestHeaderCleared() {
		_spec.ClearField(ginlog.FieldRequestHeader, field.TypeString)
	}
	if value, ok := gluo.mutation.RequestCostTime(); ok {
		_spec.SetField(ginlog.FieldRequestCostTime, field.TypeInt64, value)
	}
	if value, ok := gluo.mutation.AddedRequestCostTime(); ok {
		_spec.AddField(ginlog.FieldRequestCostTime, field.TypeInt64, value)
	}
	if gluo.mutation.RequestCostTimeCleared() {
		_spec.ClearField(ginlog.FieldRequestCostTime, field.TypeInt64)
	}
	if value, ok := gluo.mutation.ResponseTime(); ok {
		_spec.SetField(ginlog.FieldResponseTime, field.TypeTime, value)
	}
	if gluo.mutation.ResponseTimeCleared() {
		_spec.ClearField(ginlog.FieldResponseTime, field.TypeTime)
	}
	if value, ok := gluo.mutation.ResponseHeader(); ok {
		_spec.SetField(ginlog.FieldResponseHeader, field.TypeString, value)
	}
	if gluo.mutation.ResponseHeaderCleared() {
		_spec.ClearField(ginlog.FieldResponseHeader, field.TypeString)
	}
	if value, ok := gluo.mutation.ResponseStatusCode(); ok {
		_spec.SetField(ginlog.FieldResponseStatusCode, field.TypeInt, value)
	}
	if value, ok := gluo.mutation.AddedResponseStatusCode(); ok {
		_spec.AddField(ginlog.FieldResponseStatusCode, field.TypeInt, value)
	}
	if gluo.mutation.ResponseStatusCodeCleared() {
		_spec.ClearField(ginlog.FieldResponseStatusCode, field.TypeInt)
	}
	if value, ok := gluo.mutation.ResponseData(); ok {
		_spec.SetField(ginlog.FieldResponseData, field.TypeString, value)
	}
	if gluo.mutation.ResponseDataCleared() {
		_spec.ClearField(ginlog.FieldResponseData, field.TypeString)
	}
	if value, ok := gluo.mutation.GoVersion(); ok {
		_spec.SetField(ginlog.FieldGoVersion, field.TypeString, value)
	}
	if gluo.mutation.GoVersionCleared() {
		_spec.ClearField(ginlog.FieldGoVersion, field.TypeString)
	}
	if value, ok := gluo.mutation.SdkVersion(); ok {
		_spec.SetField(ginlog.FieldSdkVersion, field.TypeString, value)
	}
	if gluo.mutation.SdkVersionCleared() {
		_spec.ClearField(ginlog.FieldSdkVersion, field.TypeString)
	}
	if value, ok := gluo.mutation.SystemInfo(); ok {
		_spec.SetField(ginlog.FieldSystemInfo, field.TypeString, value)
	}
	if gluo.mutation.SystemInfoCleared() {
		_spec.ClearField(ginlog.FieldSystemInfo, field.TypeString)
	}
	_node = &GinLog{config: gluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gluo.mutation.done = true
	return _node, nil
}
