// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.dtapp.net/golog/internal/ent/ginlog"
)

// GinLog is the model entity for the GinLog schema.
type GinLog struct {
	config `json:"-"`
	// ID of the ent.
	// 请求编号
	ID int64 `json:"id,omitempty"`
	// 请求时间
	RequestTime time.Time `json:"request_time,omitempty"`
	// 请求主机
	RequestHost string `json:"request_host,omitempty"`
	// 请求地址
	RequestPath string `json:"request_path,omitempty"`
	// 请求参数
	RequestQuery string `json:"request_query,omitempty"`
	// 请求方式
	RequestMethod string `json:"request_method,omitempty"`
	// 请求协议
	RequestScheme string `json:"request_scheme,omitempty"`
	// 请求类型
	RequestContentType string `json:"request_content_type,omitempty"`
	// 请求内容
	RequestBody string `json:"request_body,omitempty"`
	// 请求IP
	RequestClientIP string `json:"request_client_ip,omitempty"`
	// 请求UA
	RequestUserAgent string `json:"request_user_agent,omitempty"`
	// 请求头
	RequestHeader string `json:"request_header,omitempty"`
	// 请求消耗时长
	RequestCostTime int64 `json:"request_cost_time,omitempty"`
	// 响应时间
	ResponseTime time.Time `json:"response_time,omitempty"`
	// 响应头
	ResponseHeader string `json:"response_header,omitempty"`
	// 响应状态
	ResponseStatusCode int `json:"response_status_code,omitempty"`
	// 响应内容
	ResponseData string `json:"response_data,omitempty"`
	// Go版本
	GoVersion string `json:"go_version,omitempty"`
	// Sdk版本
	SdkVersion string `json:"sdk_version,omitempty"`
	// 系统信息
	SystemInfo   string `json:"system_info,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GinLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ginlog.FieldID, ginlog.FieldRequestCostTime, ginlog.FieldResponseStatusCode:
			values[i] = new(sql.NullInt64)
		case ginlog.FieldRequestHost, ginlog.FieldRequestPath, ginlog.FieldRequestQuery, ginlog.FieldRequestMethod, ginlog.FieldRequestScheme, ginlog.FieldRequestContentType, ginlog.FieldRequestBody, ginlog.FieldRequestClientIP, ginlog.FieldRequestUserAgent, ginlog.FieldRequestHeader, ginlog.FieldResponseHeader, ginlog.FieldResponseData, ginlog.FieldGoVersion, ginlog.FieldSdkVersion, ginlog.FieldSystemInfo:
			values[i] = new(sql.NullString)
		case ginlog.FieldRequestTime, ginlog.FieldResponseTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GinLog fields.
func (gl *GinLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ginlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gl.ID = int64(value.Int64)
		case ginlog.FieldRequestTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field request_time", values[i])
			} else if value.Valid {
				gl.RequestTime = value.Time
			}
		case ginlog.FieldRequestHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_host", values[i])
			} else if value.Valid {
				gl.RequestHost = value.String
			}
		case ginlog.FieldRequestPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_path", values[i])
			} else if value.Valid {
				gl.RequestPath = value.String
			}
		case ginlog.FieldRequestQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_query", values[i])
			} else if value.Valid {
				gl.RequestQuery = value.String
			}
		case ginlog.FieldRequestMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_method", values[i])
			} else if value.Valid {
				gl.RequestMethod = value.String
			}
		case ginlog.FieldRequestScheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_scheme", values[i])
			} else if value.Valid {
				gl.RequestScheme = value.String
			}
		case ginlog.FieldRequestContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_content_type", values[i])
			} else if value.Valid {
				gl.RequestContentType = value.String
			}
		case ginlog.FieldRequestBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value.Valid {
				gl.RequestBody = value.String
			}
		case ginlog.FieldRequestClientIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_client_ip", values[i])
			} else if value.Valid {
				gl.RequestClientIP = value.String
			}
		case ginlog.FieldRequestUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_user_agent", values[i])
			} else if value.Valid {
				gl.RequestUserAgent = value.String
			}
		case ginlog.FieldRequestHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_header", values[i])
			} else if value.Valid {
				gl.RequestHeader = value.String
			}
		case ginlog.FieldRequestCostTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_cost_time", values[i])
			} else if value.Valid {
				gl.RequestCostTime = value.Int64
			}
		case ginlog.FieldResponseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field response_time", values[i])
			} else if value.Valid {
				gl.ResponseTime = value.Time
			}
		case ginlog.FieldResponseHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_header", values[i])
			} else if value.Valid {
				gl.ResponseHeader = value.String
			}
		case ginlog.FieldResponseStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_status_code", values[i])
			} else if value.Valid {
				gl.ResponseStatusCode = int(value.Int64)
			}
		case ginlog.FieldResponseData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_data", values[i])
			} else if value.Valid {
				gl.ResponseData = value.String
			}
		case ginlog.FieldGoVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field go_version", values[i])
			} else if value.Valid {
				gl.GoVersion = value.String
			}
		case ginlog.FieldSdkVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sdk_version", values[i])
			} else if value.Valid {
				gl.SdkVersion = value.String
			}
		case ginlog.FieldSystemInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_info", values[i])
			} else if value.Valid {
				gl.SystemInfo = value.String
			}
		default:
			gl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GinLog.
// This includes values selected through modifiers, order, etc.
func (gl *GinLog) Value(name string) (ent.Value, error) {
	return gl.selectValues.Get(name)
}

// Update returns a builder for updating this GinLog.
// Note that you need to call GinLog.Unwrap() before calling this method if this GinLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (gl *GinLog) Update() *GinLogUpdateOne {
	return NewGinLogClient(gl.config).UpdateOne(gl)
}

// Unwrap unwraps the GinLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gl *GinLog) Unwrap() *GinLog {
	_tx, ok := gl.config.driver.(*txDriver)
	if !ok {
		panic("ent: GinLog is not a transactional entity")
	}
	gl.config.driver = _tx.drv
	return gl
}

// String implements the fmt.Stringer.
func (gl *GinLog) String() string {
	var builder strings.Builder
	builder.WriteString("GinLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gl.ID))
	builder.WriteString("request_time=")
	builder.WriteString(gl.RequestTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("request_host=")
	builder.WriteString(gl.RequestHost)
	builder.WriteString(", ")
	builder.WriteString("request_path=")
	builder.WriteString(gl.RequestPath)
	builder.WriteString(", ")
	builder.WriteString("request_query=")
	builder.WriteString(gl.RequestQuery)
	builder.WriteString(", ")
	builder.WriteString("request_method=")
	builder.WriteString(gl.RequestMethod)
	builder.WriteString(", ")
	builder.WriteString("request_scheme=")
	builder.WriteString(gl.RequestScheme)
	builder.WriteString(", ")
	builder.WriteString("request_content_type=")
	builder.WriteString(gl.RequestContentType)
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(gl.RequestBody)
	builder.WriteString(", ")
	builder.WriteString("request_client_ip=")
	builder.WriteString(gl.RequestClientIP)
	builder.WriteString(", ")
	builder.WriteString("request_user_agent=")
	builder.WriteString(gl.RequestUserAgent)
	builder.WriteString(", ")
	builder.WriteString("request_header=")
	builder.WriteString(gl.RequestHeader)
	builder.WriteString(", ")
	builder.WriteString("request_cost_time=")
	builder.WriteString(fmt.Sprintf("%v", gl.RequestCostTime))
	builder.WriteString(", ")
	builder.WriteString("response_time=")
	builder.WriteString(gl.ResponseTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("response_header=")
	builder.WriteString(gl.ResponseHeader)
	builder.WriteString(", ")
	builder.WriteString("response_status_code=")
	builder.WriteString(fmt.Sprintf("%v", gl.ResponseStatusCode))
	builder.WriteString(", ")
	builder.WriteString("response_data=")
	builder.WriteString(gl.ResponseData)
	builder.WriteString(", ")
	builder.WriteString("go_version=")
	builder.WriteString(gl.GoVersion)
	builder.WriteString(", ")
	builder.WriteString("sdk_version=")
	builder.WriteString(gl.SdkVersion)
	builder.WriteString(", ")
	builder.WriteString("system_info=")
	builder.WriteString(gl.SystemInfo)
	builder.WriteByte(')')
	return builder.String()
}

// GinLogs is a parsable slice of GinLog.
type GinLogs []*GinLog
